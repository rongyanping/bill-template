[{"D:\\ryp\\git\\bill-template\\src\\index.js":"1","D:\\ryp\\git\\bill-template\\src\\reportWebVitals.js":"2","D:\\ryp\\git\\bill-template\\src\\App.js":"3","D:\\ryp\\git\\bill-template\\src\\bill-templates\\index.jsx":"4","D:\\ryp\\git\\bill-template\\src\\bill-templates\\service.js":"5","D:\\ryp\\git\\bill-template\\src\\bill-templates\\common\\constant.js":"6","D:\\ryp\\git\\bill-template\\src\\bill-templates\\common\\utils.js":"7","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\block\\index.jsx":"8","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\row\\index.jsx":"9","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\lsit-row\\index.jsx":"10","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\index.jsx":"11","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\cell\\index.jsx":"12","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\text-cell\\index.jsx":"13","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\upload\\index.jsx":"14"},{"size":576,"mtime":1610029399298,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1610026215452,"results":"17","hashOfConfig":"16"},{"size":528,"mtime":1610026215452,"results":"18","hashOfConfig":"16"},{"size":45402,"mtime":1610031717774,"results":"19","hashOfConfig":"16"},{"size":829,"mtime":1610030818761,"results":"20","hashOfConfig":"16"},{"size":849,"mtime":1610027331887,"results":"21","hashOfConfig":"16"},{"size":8731,"mtime":1610031223515,"results":"22","hashOfConfig":"16"},{"size":7445,"mtime":1610029940081,"results":"23","hashOfConfig":"16"},{"size":6992,"mtime":1610031307074,"results":"24","hashOfConfig":"16"},{"size":1868,"mtime":1610027331993,"results":"25","hashOfConfig":"16"},{"size":114,"mtime":1610027331983,"results":"26","hashOfConfig":"16"},{"size":3467,"mtime":1610029610458,"results":"27","hashOfConfig":"16"},{"size":1911,"mtime":1610027332045,"results":"28","hashOfConfig":"16"},{"size":4156,"mtime":1610027332060,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"1jc492o",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":2,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":2,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"D:\\ryp\\git\\bill-template\\src\\index.js",["68"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport BillTemplates from './bill-templates';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <BillTemplates />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["69","70"],"D:\\ryp\\git\\bill-template\\src\\reportWebVitals.js",[],"D:\\ryp\\git\\bill-template\\src\\App.js",[],"D:\\ryp\\git\\bill-template\\src\\bill-templates\\index.jsx",["71","72","73","74"],"/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-expressions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Affix, Button, Switch, Input, message, Icon } from 'antd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { DndProvider, createDndContext } from 'react-dnd';\r\nimport { findIndex, deepClone } from 'lodash';\r\nimport { largePageWidth, mdPageWidth, smPageWidth } from './common/constant';\r\nimport { getDishList, getShowKeys, hasComponentInList, checkProps } from './common/utils';\r\nimport Block from './components/block';\r\nimport './style.less';\r\nimport IconDel from '../assets/svgs/delete_bill.svg';\r\nimport mockComponentsData from '../mock/components.json';\r\n// import mockComponentsData from '../../mock/bill/invalid.json';\r\n\r\nimport { uploadImg, delImg, uploadCode } from './service';\r\n// TODO: 左侧默认选中组件没有对列表组件判断\r\nconst regStr = /([{}])/g;\r\nexport default function BillTemplates({\r\n  componentsData = mockComponentsData,\r\n  pageSize = 80,\r\n  isEdit = true,\r\n  onSubmit,\r\n  onCancel,\r\n}) {\r\n\r\n  /**\r\n   * 菜品列表相关\r\n   */\r\n  const [dishTemplate, setDishTemplate] = useState([]); // 完整菜品表格数据模型\r\n  const [showkeys, setShowKeys] = useState([]); // 已选菜品列表展示中的字段\r\n  /**\r\n   * 右侧模块\r\n   */\r\n  const [fontActive, setFontActive] = useState(null);\r\n  const [alignActive, setAlignActive] = useState(null);\r\n  const [activeFontWeight, setActiveFontWeight] = useState(1);\r\n  const [activeSeparator, setActiveSeparator] = useState(false);\r\n  const [activeLabel, setActiveLabel] = useState(null);\r\n  const [isShowLabelEdit, setIsShowLabelEdit] = useState(true);\r\n  const [isShowStyleEdit, setIsShowStyleEdit] = useState(true);\r\n  const [blankLineNum, setBlankLineNum] = useState(0);\r\n  // 改变样式\r\n  const moduleItemClick = (type, number, checked) => {\r\n    if (!Object.keys(activeBlock).length) return;\r\n    let newNumber = number;\r\n    switch (type) {\r\n      case 'fontSize':\r\n        setFontActive(newNumber);\r\n        break;\r\n      case 'fontWeight':\r\n        newNumber = checked ? 2 : 1;\r\n        setActiveFontWeight(newNumber);\r\n        break;\r\n      case 'align':\r\n        setAlignActive(newNumber);\r\n        break;\r\n      default:\r\n    }\r\n    const tempMainData = deepClone(mainData);\r\n    const { blockIndex, rowIndex } = activeBlock;\r\n    function loop(arr) {\r\n      arr.forEach(row => {\r\n        if (row.childRows && row.childRows.length) {\r\n          loop(row.childRows);\r\n        }\r\n        if (row.cells && row.cells.length) {\r\n          row.cells.forEach(item => {\r\n            if (item.style) {\r\n              item.style = {\r\n                ...item.style,\r\n                [type]: newNumber,\r\n              };\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    loop(tempMainData[blockIndex].rows)\r\n    setMainData(tempMainData);\r\n  };\r\n  // 插入分隔符 当前选中的下方插入\r\n  const handleChangeSiwtch = (checked) => {\r\n    if (!Object.keys(activeBlock).length) return;\r\n    const tempMainData = deepClone(mainData);\r\n    const { blockIndex } = activeBlock;\r\n    // 当前block中是否已经存在了分隔符\r\n    let separatorIndex = -1; // 分隔符所在的位置\r\n    let blankCount = 0; // 有几个空白行\r\n    let len = tempMainData[blockIndex].rows.length;\r\n    tempMainData[blockIndex].rows && tempMainData[blockIndex].rows.length && tempMainData[blockIndex].rows.forEach((item, index) => {\r\n      if (item.cells && item.cells.length) {\r\n        item.cells.forEach((el) => {\r\n          if (el.type == 5) separatorIndex = index;\r\n          if (el.type == 6) blankCount++;\r\n        });\r\n      }\r\n    });\r\n    checked && separatorIndex < 0\r\n      ? tempMainData[blockIndex].rows.splice(blankCount > 0 ? len - blankCount : len, 0, {\r\n        type: 1,\r\n        data: \"\",\r\n        visible: \"\",\r\n        cells: [\r\n          {\r\n            id: `separator_${new Date().getTime()}`,\r\n            name: \"\",\r\n            title: \"\",\r\n            dat: \"\",\r\n            param: \"-\",\r\n            type: 5,\r\n            percent: 100,\r\n            style: {\r\n              align: 1,\r\n              fontSize: 1,\r\n              fontWeight: 1\r\n            }\r\n          }\r\n        ]\r\n      })\r\n      : tempMainData[blockIndex].rows.splice(separatorIndex, 1);\r\n    setMainData(tempMainData);\r\n    setActiveSeparator(checked);\r\n  };\r\n  // 修改自定义文案\r\n  const handleChangeLabel = e => {\r\n    if (!Object.keys(activeBlock).length) return;\r\n    if (e.target.value.replace(/[\\u0391-\\uFFE5]/g, 'aa').length > 20) return;\r\n    const tempMainData = deepClone(mainData);\r\n    const renderDatasTemp = deepClone(renderDatas);\r\n    const { blockIndex, rowIndex } = activeBlock;\r\n    // 修改name || 修改二维码、图片的自定义文案 || 自定义文案\r\n    if (tempMainData[blockIndex].rows[rowIndex].cells) {\r\n      const { type, param, data, title } = tempMainData[blockIndex].rows[rowIndex].cells[0];\r\n      // 二维码、图片：修改rednerDatas中的objectList；同时修改要保存的objects里面的内容\r\n      if (type == 2 || type == 3 || type == 4) {\r\n        renderDatasTemp.objectList &&\r\n          renderDatasTemp.objectList.length &&\r\n          renderDatasTemp.objectList.forEach((objEl) => {\r\n            if (objEl.placeholder === param.replace(regStr, '')) {\r\n              objEl.customText = e.target.value;\r\n            }\r\n          });\r\n        setRenderDatas(renderDatasTemp);\r\n      } else if (type == 1) {\r\n        // 自定义文案data title为空&data为纯文本--直接改json中的data\r\n        if (!title && !regStr.test(data)) {\r\n          tempMainData[blockIndex].rows[rowIndex].cells[0].data = e.target.value;\r\n        } else if (regStr.test(data)) {\r\n          tempMainData[blockIndex].rows[rowIndex].cells[0].name = e.target.value;\r\n        }\r\n        setMainData(tempMainData);\r\n      }\r\n    }\r\n    setActiveLabel(e.target.value);\r\n  };\r\n  // 插入空白行 当前选中的下方插入（分隔符之后）\r\n  const handleBlankLine = (type) => {\r\n    const blockLineNumTemp = type === 'add' ? blankLineNum + 1 : blankLineNum - 1;\r\n    if (!Object.keys(activeBlock).length || (blockLineNumTemp < 0)) return;\r\n    if (blockLineNumTemp > 9) {\r\n      message.warn('最多插入9行空白行');\r\n      return;\r\n    }\r\n    const tempMainData = deepClone(mainData);\r\n    const { blockIndex } = activeBlock;\r\n    const rowsTemp = tempMainData[blockIndex] && tempMainData[blockIndex].rows;\r\n    let separatorIndex = -1; // 分隔符的位置\r\n    // 是否存在分隔符\r\n    if (rowsTemp && rowsTemp.length) {\r\n      rowsTemp.forEach((el, index) => {\r\n        if (el.cells && el.cells.length) {\r\n          el.cells.forEach((el2, index2) => {\r\n            if (el2.type == 5) {\r\n              separatorIndex = index;\r\n            }\r\n          });\r\n        }\r\n      })\r\n    }\r\n    // 存在分隔符 在分隔符下方插入/删除空行\r\n    if (separatorIndex > -1) {\r\n      type === 'add'\r\n        ? tempMainData[blockIndex].rows.splice(separatorIndex + 1, 0, {\r\n          type: 1,\r\n          data: \"\",\r\n          visible: \"\",\r\n          cells: [\r\n            {\r\n              id: `blank_line_${new Date().getTime()}`,\r\n              name: \"\",\r\n              title: \"\",\r\n              dat: \"\",\r\n              param: \"\",\r\n              type: 6,\r\n              percent: 100,\r\n              style: {\r\n                align: 1,\r\n                fontSize: 1,\r\n                fontWeight: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n        )\r\n        : tempMainData[blockIndex].rows.splice(separatorIndex + 1, 1);\r\n    } else {\r\n      // 无分隔符 直接在末尾插入/删除\r\n      type === 'add'\r\n        ? tempMainData[blockIndex].rows.push({\r\n          type: 1,\r\n          data: \"\",\r\n          visible: \"\",\r\n          cells: [\r\n            {\r\n              id: `blank_line_${new Date().getTime()}`,\r\n              name: \"\",\r\n              title: \"\",\r\n              dat: \"\",\r\n              param: \"\",\r\n              type: 6,\r\n              percent: 100,\r\n              style: {\r\n                align: 1,\r\n                fontSize: 1,\r\n                fontWeight: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n        )\r\n        : tempMainData[blockIndex].rows.pop();\r\n    }\r\n    setBlankLineNum(blockLineNumTemp);\r\n    setMainData(tempMainData);\r\n  };\r\n  /**\r\n   * 中间模块\r\n   */\r\n  const RNDContext = createDndContext(HTML5Backend);\r\n  const manager = useRef(RNDContext);\r\n  // 当前选中行\r\n  const [activeBlock, setActiveBlock] = useState({});\r\n  // 点击选中行\r\n  const handleBlockClick = (block, allBlock) => {\r\n    setActiveBlock(block);\r\n    if (Object.keys(block).length && (mainData.length || allBlock.length)) {\r\n      const tempMainData = mainData && mainData.length > 0 ? deepClone(mainData) : deepClone(allBlock);\r\n      const tempRows = tempMainData[block.blockIndex] && tempMainData[block.blockIndex].rows ? tempMainData[block.blockIndex].rows : null;\r\n      if (!tempRows) return;\r\n      let separatorFlag = false;\r\n      // 隐藏整个样式编辑: rows里面只有一个分隔符\r\n      if (tempRows.length === 1 && tempRows[0].cells.length === 1 && tempRows[0].cells[0].type == 5) setIsShowStyleEdit(false);\r\n      // 选中行为list\r\n      if (block.isListBlock) {\r\n        // setIsShowStyleEdit(false);\r\n        const showKeys = getShowKeys(mainData[block.blockIndex] && mainData[block.blockIndex].rows);\r\n        setShowKeys(showKeys);\r\n      }\r\n\r\n      // 是否存在分隔符、空白行\r\n      let blankLineNum = 0;\r\n      tempRows.forEach((rowEl) => {\r\n        if (rowEl.cells && rowEl.cells.length === 1) {\r\n          if (rowEl.cells[0].type == 5) {\r\n            separatorFlag = true;\r\n          }\r\n          if (rowEl.cells[0].type == 6) {\r\n            blankLineNum++;\r\n          }\r\n        }\r\n      })\r\n      setActiveSeparator(separatorFlag);\r\n      setBlankLineNum(blankLineNum);\r\n      if (block.isListBlock) { // 列表block\r\n        // setIsShowStyleEdit(false);\r\n        // 一行多列或列表内字体大小\r\n        const fontSize = checkProps(mainData[block.blockIndex].rows, 'fontSize');\r\n        // 一行多列或列表内字体居中\r\n        const align = checkProps(mainData[block.blockIndex].rows, 'align');\r\n        // 一行多列或列表内字体加粗\r\n        const fontWeight = checkProps(mainData[block.blockIndex].rows, 'fontWeight');\r\n        setAlignActive(align.length === 1 ? align[0] : 0);\r\n        setFontActive(fontSize.length === 1 ? fontSize[0] : 0);\r\n        setActiveFontWeight(fontWeight.length === 1 ? fontWeight[0] : 1);\r\n        setIsShowLabelEdit(false);\r\n        const showKeys = getShowKeys(mainData[block.blockIndex] && mainData[block.blockIndex].rows);\r\n        setShowKeys(showKeys);\r\n      } else { // 普通block\r\n        // 一个row中多个cell\r\n        if (\r\n          tempRows[block.rowIndex].cells &&\r\n          tempRows[block.rowIndex].cells.length > 1\r\n        ) {\r\n          // 一行多列或列表内字体大小\r\n          const fontSize = checkProps(mainData[block.blockIndex].rows, 'fontSize');\r\n          // 一行多列或列表内字体居中\r\n          const align = checkProps(mainData[block.blockIndex].rows, 'align');\r\n          // 一行多列或列表内字体加粗\r\n          const fontWeight = checkProps(mainData[block.blockIndex].rows, 'fontWeight');\r\n          setAlignActive(align.length === 1 ? align[0] : 0);\r\n          setFontActive(fontSize.length === 1 ? fontSize[0] : 0);\r\n          setActiveFontWeight(fontWeight.length === 1 ? fontWeight[0] : 1);\r\n          setIsShowLabelEdit(false);\r\n        } else if (\r\n          tempRows[block.rowIndex].cells &&\r\n          tempRows[block.rowIndex].cells.length === 1\r\n        ) {\r\n          tempRows[block.rowIndex].cells.forEach(el => {\r\n            const { type, title, name, style, param } = el;\r\n            // 隐藏编辑文字: title为占位符; type==1 & title不存在; 上传logo\r\n            setIsShowLabelEdit(!(title && regStr.test(title)));\r\n            // 文案编辑：图片、二维码---自定义文案取renderDatas中objectList字段；自定义文案--title为空&data为纯文本；普通文本name||title\r\n            if (type === 2 || type === 3 || type === 4) {\r\n              const renderDatasTemp = deepClone(renderDatas);\r\n              let textTemp = '';\r\n              renderDatasTemp.objectList &&\r\n                renderDatasTemp.objectList.length &&\r\n                renderDatasTemp.objectList.forEach((el2) => {\r\n                  if (el2.placeholder === param.replace(regStr, '')) {\r\n                    textTemp = el2.customText;\r\n                  }\r\n                });\r\n              setActiveLabel(textTemp);\r\n              if (type === 4 && el.data === '{shopLogo}') {\r\n                setIsShowLabelEdit(false);\r\n              } else {\r\n                setIsShowLabelEdit(!(title && regStr.test(title)));\r\n              }\r\n            } else if (type === 1) {\r\n              const newLabel = (!title && !regStr.test(el.data)) ? el.data : (name || title);\r\n              // 隐藏编辑文字：data含有占位符 && title不存在\r\n              if (regStr.test(el.data)) {\r\n                setIsShowLabelEdit(Boolean(title) ? true : false);\r\n                Boolean(title) ? setActiveLabel(newLabel) : null;\r\n              } else {\r\n                setIsShowLabelEdit(true);\r\n                setActiveLabel(newLabel);\r\n              }\r\n            }\r\n            // console.log('text======', regStr.test(el.data), Boolean(title), type);\r\n            // 样式：分隔符、空白行-样式置为空；其余取json中数据\r\n            if (type === 5 || type === 6) {\r\n              setFontActive(0);\r\n              setAlignActive(0);\r\n              setActiveFontWeight(1);\r\n            } else {\r\n              setFontActive(el.style.fontSize ? el.style.fontSize : 1);\r\n              setActiveFontWeight(\r\n                el.style.fontWeight === 2 ? el.style.fontWeight : 1\r\n              );\r\n              setAlignActive(el.style.align ? el.style.align : 1);\r\n            }\r\n            // 隐藏整个样式编辑：分隔符\r\n            setIsShowStyleEdit(!(el.type === 5));\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // 上传图片\r\n  const handleUpload = (options, originData) => {\r\n    console.log('options=====', options, activeBlock);\r\n    const { file } = options;\r\n    const isLt1M = file.size / 1024 / 1024 < 1;\r\n    const isJPG = file.type === 'image/jpeg';\r\n    const isJPEG = file.type === 'image/jpeg';\r\n    // 1M jpg\r\n    if (!(isJPG || isJPEG)) {\r\n      message.warn('只能上传JPG、JPEG格式的图片');\r\n      return;\r\n    } else if (!isLt1M) {\r\n      message.warn('图片超过1M,不允许上传');\r\n      return;\r\n    }\r\n    let reader;\r\n    if (file) {\r\n      reader = new FileReader();\r\n      reader.onload = function (event) {\r\n        const base64 = event.target.result;\r\n        let tempObj = {};\r\n        // setImgUrl(base64);\r\n        const tempMainData = deepClone(mainData);\r\n        const tempRows = tempMainData[activeBlock.blockIndex] && tempMainData[activeBlock.blockIndex].rows ? tempMainData[block.blockIndex].rows : null;\r\n        let customText = '';\r\n        let paramTemp = '';\r\n        const renderDatasTemp = deepClone(renderDatas);\r\n        renderDatasTemp.objectList.forEach((el) => {\r\n          if (el.placeholder === paramTemp) {\r\n            customText = el.customText;\r\n          }\r\n        });\r\n        if (tempRows.cells[0].type == 4) {\r\n          let placeholder = '';\r\n          const { blockIndex, rowIndex } = activeBlock;\r\n          if (tempMainData[blockIndex].rows[rowIndex].cells && tempMainData[blockIndex].rows[rowIndex].cells.length) {\r\n            tempMainData[blockIndex].rows[rowIndex].cells.forEach((el) => {\r\n              if ((el.type == 2 || el.type == 3 || el.type == 4) && el.data === originData) {\r\n                placeholder = tempMainData[blockIndex].rows[rowIndex].cells[0].data;\r\n                paramTemp = tempMainData[blockIndex].rows[rowIndex].cells[0].param;\r\n              }\r\n            });\r\n          }\r\n          const params = {\r\n            code: base64,\r\n            placeholder,\r\n          };\r\n          uploadImg(params)\r\n            .then(data => {\r\n              console.log('res00000---', data);\r\n              if (data.code === 0) {\r\n                tempObj = {\r\n                  id: data.body.id,\r\n                  objectKey: data.body.key, // 上传图片返回的key\r\n                  objectValue: data.body.url, // 上传图片对应的oss地址\r\n                  placeholder: data.body.placeholder, // 图片在模板中的占位符\r\n                  customText, // 自定义文案\r\n                }\r\n              }\r\n            })\r\n            .cathch(e => {\r\n              message.error(e);\r\n            });\r\n        } else {\r\n          const params = {\r\n            codeFile: base64,\r\n          };\r\n          uploadCode(params)\r\n            .then(data => {\r\n              console.log('res111111---', data);\r\n              if (data.code === 0) {\r\n                tempObj = {\r\n                  id: data.body.id,\r\n                  objectKey: data.body.key, // 上传图片返回的key\r\n                  objectValue: data.body.url, // 上传图片对应的oss地址\r\n                  placeholder: data.body.placeholder, // 图片在模板中的占位符\r\n                  customText, // 自定义文案\r\n                }\r\n              }\r\n            })\r\n            .cathch(e => {\r\n              message.error(e);\r\n            });\r\n        }\r\n        let indexTemp = -1; // 是否已经存在改图片的信息\r\n        renderDatasTemp.objectList.forEach((el, index) => {\r\n          if (el.placeholder === originData) {\r\n            indexTemp = index;\r\n          }\r\n        });\r\n        indexTemp > -1 ? renderDatasTemp.objectList[indexTemp] = tempObj : renderDatasTemp.objectList.push(tempObj);\r\n        setRenderDatas(renderDatasTemp);\r\n      };\r\n    }\r\n    reader.readAsDataURL(file);\r\n  };\r\n  // 删除上传的图片\r\n  const handleDeleteUpload = (originData) => {\r\n    const renderDatasTemp = deepClone(renderDatas);\r\n    let imgKey = '';\r\n    let indexTemp = -1;\r\n    renderDatasTemp.objectList.forEach((el, index) => {\r\n      if (el.placeholder === originData) {\r\n        imgKey = el.objectKey;\r\n        indexTemp = index;\r\n      }\r\n    });\r\n    const params = { key: imgKey };\r\n    delImg(params)\r\n      .then(data => {\r\n        if (data.code === 0) {\r\n          message.success('删除成功');\r\n          indexTemp > -1 ? renderDatasTemp.objectList.splice(indexTemp, -1) : '';\r\n        }\r\n      })\r\n      .catch(e => {\r\n        message.error(e);\r\n      });\r\n  };\r\n\r\n  /**\r\n   * 获取当前行类型\r\n   * @param {*} row 当前row数据\r\n   * @returns 'normal' / 'separator' / 'blank' \r\n   */\r\n  function getRowType(row = {}) {\r\n    let res = 'normal';\r\n    if (row.type == 1 && row.cells && row.cells.length === 1) {\r\n\r\n      if (row.cells[0].type == 5) {\r\n        res = 'separator';\r\n      } else if (row.cells[0].type == 6) {\r\n        res = 'blank';\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // dataSource内部维护; \r\n  const [mainData, setMainData] = useState([]);\r\n  const [renderDatas, setRenderDatas] = useState([]); // 组件的渲染数据renderDatas\r\n  const [isReset, setIsReset] = useState(false); // 是否重置\r\n  useEffect(() => {\r\n    /**\r\n     * 将获取的rows拆分为多个block，拆分逻辑见下链接内 争议问题结论 4分割符与空白行均为row?\r\n     * https://yuque.antfin.com/docs/share/86aefa9d-5256-467c-92d7-e57ec98e6c03?# 《票据模板系分》\r\n     **/\r\n    let blockLength = 0; // chunk数量\r\n    let beforeRowType = null; // 前一row类型：'normal','blank', 'separator'  注：除空白行和分隔符外的row均为normal\r\n    let beforeRowConnection = ''; // 前一row中connection值\r\n    const blocks = []; // 区分好的block集合\r\n    const rowsTemp = componentsData.content && componentsData.content.rows ? componentsData.content.rows : null;\r\n    rowsTemp && rowsTemp.forEach((row, index) => {\r\n      const rowTypeNow = row ? getRowType(row) : 'normal'; // row内是否是分隔符 ? 'separator' : row内是否是空白行 ? 'blank' : 'normal'\r\n      if (index === 0) { // 第一个row不管内容是什么，都塞到第一个block里\r\n        blocks[blockLength] = { key: new Date().getTime() + blockLength, rows: [] };\r\n        blocks[blockLength].rows.push(row);\r\n        if (row.connection) {\r\n          blocks[blockLength]['connection'] = row.connection;\r\n        }\r\n        beforeRowType = rowTypeNow;\r\n        beforeRowConnection = row.connection || '';\r\n      } else {\r\n        /**\r\n        * 新增chunk的逻辑\r\n        * 1. 前一row类型为separator且当前不为blank，新增chunk\r\n        * 2. 前一row类型为normal类型且当前row不为separator和blank\r\n        * 3. 前一个row类型是blank且当前row是normal 新增\r\n        * 4. 前一个row中的connection 和当前row中的connection不同 新增 \r\n        * 注：1，2，3的判断都是基于前一个row中的connection与当前connection不同 或 connection不存在\r\n        */\r\n        if (beforeRowConnection && row.connection && beforeRowConnection === row.connection) {\r\n          blocks[blockLength].rows.push(row);\r\n          beforeRowConnection = row.connection;\r\n        } else {\r\n          // connection 不存在或前后不相同\r\n          if (\r\n            (beforeRowType === 'separator' && rowTypeNow !== 'blank') ||\r\n            (beforeRowType === 'normal' && rowTypeNow !== 'separator' && rowTypeNow !== 'blank' && (beforeRowConnection !== row.connection || !beforeRowConnection || !row.connection)) ||\r\n            (beforeRowType === 'blank' && rowTypeNow === 'normal')\r\n          ) {\r\n            blockLength += 1;\r\n            blocks[blockLength] = { key: new Date().getTime() + blockLength, rows: [] };\r\n            blocks[blockLength].rows.push(row);\r\n            beforeRowType = rowTypeNow;\r\n            beforeRowConnection = row.connection;\r\n            if (row.connection) {\r\n              blocks[blockLength]['connection'] = row.connection;\r\n            }\r\n          } else {\r\n            blocks[blockLength].rows.push(row);\r\n            beforeRowType = rowTypeNow;\r\n          }\r\n        }\r\n      }\r\n      if (rowTypeNow === 'normal' && !row.connection) { // 普通业务row位置\r\n        blocks[blockLength].rowIndex = blocks[blockLength].rows.length - 1;\r\n      } else if (rowTypeNow === 'normal' && !row.connection) { // 判断列表内是否有表头\r\n        const headerRow = blocks[blockLength].rows.filter(i => row.type == 1 && row.cells && row.cells.length && row.cells[0].type == 1);\r\n        blocks[blockLength].hasHeader(!!(headerRow && headerRow.length));\r\n      }\r\n    });\r\n    setMainData(blocks);\r\n    setRenderDatas(componentsData);\r\n    console.log('bolck0000--------------', componentsData);\r\n    setDishTemplate(componentsData.dishTemplate);\r\n    setTimeout(() => {\r\n      // 默认选中第一个\r\n      if (blocks && isEdit) {\r\n        const block = deepClone(blocks[0]);\r\n        let isListBlock = false; // 是否为列表block\r\n        const blockIndex = 0;\r\n        block && block.rows && block.rows.forEach(row => isListBlock = isListBlock || row.type == 2);\r\n        block && handleBlockClick({ blockKey: block.key, blockIndex, rowIndex: block.rowIndex, isListBlock, connection: block.connection }, blocks);\r\n      }\r\n      // 默认选中的组件\r\n      const componentActiveTemp = [];\r\n      isEdit && componentsData && componentsData.modulesList && componentsData.modulesList.forEach((el) => {\r\n        if (el.componentList && el.componentList.length) {\r\n          el.componentList.forEach((el2) => {\r\n            rowsTemp && rowsTemp.forEach((rowItem) => {\r\n              if (rowItem.type == 1) { // 普通row\r\n                if (rowItem.cells && rowItem.cells.length) {\r\n                  rowItem.cells.forEach((cellItem) => {\r\n                    if (el2.id == cellItem.id) {\r\n                      componentActiveTemp.push(el2.id);\r\n                    }\r\n                  });\r\n                }\r\n              } else if (rowItem.type == 2) { // 列表类型row，判断选中条件：包含ID即为选中\r\n                const hasComponent = hasComponentInList(el2.id, rowItem);\r\n                if (hasComponent) componentActiveTemp.push(el2.id);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n      console.log(\"🚀 ~ file: index.jsx ~ line 573 ~ rowsTemp&&rowsTemp.forEach ~ componentActiveTemp\", componentActiveTemp)\r\n      setComponentActive(componentActiveTemp);\r\n    }, 50);\r\n  }, [componentsData, isReset]);\r\n\r\n  // cell调整宽度\r\n  const handleCellResize = (cellWidth, blockIndex, rowIndex) => {\r\n    const tempDataSource = deepClone(mainData);\r\n    tempDataSource[blockIndex].rows[rowIndex].cells.forEach(\r\n      (i, num) => (i.percent = cellWidth[num])\r\n    );\r\n    setMainData(tempDataSource);\r\n  };\r\n  // 移动行\r\n  const moveBlock = (dragRow, dropRow) => {\r\n    const tempData = deepClone(mainData);\r\n    const tempRow = tempData[dragRow];\r\n    if (dragRow > dropRow) {\r\n      // 向前\r\n      tempData.splice(dropRow, 0, tempRow);\r\n      tempData.splice(dragRow + 1, 1);\r\n    } else {\r\n      // 向后\r\n      tempData.splice(dropRow + 1, 0, tempRow);\r\n      tempData.splice(dragRow, 1);\r\n    }\r\n    setActiveBlock({});\r\n    setMainData(tempData);\r\n  };\r\n  // 删除行\r\n  const handleRemoveRow = () => {\r\n    if (Object.keys(activeBlock).length) {\r\n      // 已选中\r\n      const tempDataSource = deepClone(mainData);\r\n      tempDataSource.splice(activeBlock.blockIndex, 1);\r\n      // setActiveBlock({});\r\n      // 删除已选中的组件状态\r\n      const componentActiveTemp = deepClone(componentActive);\r\n      const tempRows = tempDataSource[activeBlock.blockIndex] && tempDataSource[activeBlock.blockIndex].rows ? tempDataSource[activeBlock.blockIndex].rows : null;\r\n      if (tempRows && tempRows[activeBlock.rowIndex].cells && tempRows[activeBlock.rowIndex].cells.length) {\r\n        tempRows[activeBlock.rowIndex].cells.forEach((el) => {\r\n          if (componentActiveTemp.indexOf(el.id) > -1) {\r\n            componentActiveTemp.splice(findIndex(componentActiveTemp, el.id), 1);\r\n          }\r\n        })\r\n      }\r\n      // 默认选中的行\r\n      if (tempDataSource && isEdit) {\r\n        const block = deepClone(tempDataSource[0]);\r\n        let isListBlock = false; // 是否为列表block\r\n        const blockIndex = 0;\r\n        block && block.rows.forEach(row => isListBlock = isListBlock || row.type == 2);\r\n        block && handleBlockClick({ blockKey: block.key, blockIndex, rowIndex: block.rowIndex, isListBlock }, tempDataSource);\r\n      }\r\n      setComponentActive(componentActiveTemp);\r\n      setMainData(tempDataSource);\r\n    }\r\n  };\r\n  /**\r\n   * 移动列\r\n   * @param {*} dragCell\r\n   * @param {*} dragRow\r\n   * @param {*} dropCell\r\n   * @param {*} dropRow\r\n   * @param {*} needAddRow 'top' 'bottom'\r\n   */\r\n  const moveCell = (dragCell, dragRow, dragBlock, dropCell, dropRow, dropBlock, needAddRow) => {\r\n    console.log(\"00refmoveCell ~ dragCell, dragRow, dragBlock, dropCell, dropRow, dropBlock, needAddRow\", dragCell, dragRow, dragBlock, dropCell, dropRow, dropBlock, needAddRow)\r\n    const tempData = deepClone(mainData);\r\n    const tempBlock = tempData[dragBlock];\r\n    const tempRow = tempBlock.rows[dragRow];\r\n    const tempCells = tempRow.cells;\r\n    const tempCell = tempCells[dragCell];\r\n    if (needAddRow) {\r\n      // 从两列其中一列拖出新增一行\r\n      tempCell.percent = 100;\r\n      const tempRow = {\r\n        type: 1,\r\n        data: '',\r\n        visible: '',\r\n        cells: [tempCell],\r\n      };\r\n      const tempBlock = {\r\n        key: new Date().getTime(),\r\n        rowIndex: 0,\r\n        rows: [tempRow],\r\n      };\r\n      tempCells.splice(dragCell, 1);\r\n      if (needAddRow === 'top') {\r\n        // 目标行上方新增行\r\n        tempData.splice(dropBlock, 0, tempBlock);\r\n      } else {\r\n        // 目标行下方新增行\r\n        tempData.splice(dropBlock + 1, 0, tempBlock);\r\n      }\r\n      // 原行剩余列宽度调整\r\n      tempCells[0].percent = 100;\r\n    } else {\r\n      // 正常操作\r\n      if (dragBlock === dropBlock) {\r\n        // 同行分前后\r\n        if (dragCell > dropCell) {\r\n          // 向前\r\n          tempCells.splice(dropCell, 0, tempCell);\r\n          tempCells.splice(dragCell + 1, 1);\r\n        } else {\r\n          // 向后\r\n          tempCells.splice(dropCell + 1, 0, tempCell);\r\n          tempCells.splice(dragCell, 1);\r\n        }\r\n      } else {\r\n        // 不同行直接插目标行内的cell后面，\r\n        // 宽度调整\r\n        tempCell.percent = 50;\r\n        tempData[dropBlock].rows[dropRow].cells[0].percent = 50;\r\n        tempData[dropBlock].rows[dropRow].cells.splice(1, 0, tempCell);\r\n        if (tempData[dragBlock].rows[dragRow].cells.length === 1) {\r\n          // 拖拽行只有一列，移除拖拽行\r\n          tempData.splice(dragBlock, 1);\r\n        } else {\r\n          // 拖拽行两列，移除拖拽列\r\n          tempData[dragBlock].rows[dragRow].cells.splice(dragCell, 1);\r\n          tempData[dragBlock].rows[dragRow].cells[0].percent = 100;\r\n        }\r\n      }\r\n    }\r\n    setActiveBlock({});\r\n    setMainData(tempData);\r\n  };\r\n  /**\r\n   * 左侧模块\r\n   */\r\n  const [componentActive, setComponentActive] = useState([]); // 所有选中的组件的id组成的数组\r\n  // 选中左侧组件\r\n  const moduleComponentClick = (item) => {\r\n    const { type, width, id, label, placeholder, componentProperty: componentPropertyStr, valueStyle } = item;\r\n    const componentProperty = componentPropertyStr && JSON.parse(componentPropertyStr);\r\n    const mainDataTemp = deepClone(mainData);\r\n    let componentActiveTemp = deepClone(componentActive);\r\n    // 已经存在多少个当前要添加的组件了\r\n    const limit = componentProperty.limit || 1;\r\n    const notRemove = componentProperty.notRemove || false;\r\n    let count = componentActive.indexOf(id) > -1 ? 1 : 0;\r\n    mainDataTemp.forEach((el) => {\r\n      if (el.rows && el.rows.length) {\r\n        el.rows.forEach((el2) => {\r\n          if (el2.cells && el2.cells.length) {\r\n            el2.cells.forEach((el3) => {\r\n              if (el3.id === id) {\r\n                count++\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    if (count > limit) { // 超限\r\n      message.warn(`该组件最多选择${limit}个`);\r\n      return;\r\n    }\r\n    if (notRemove && componentActiveTemp.includes(item.id)) { // 不可移除\r\n      message.warn('该组件不可移除');\r\n      return;\r\n    }\r\n    // rowType 2--列表 1或空--普通\r\n    let temp = {};\r\n    if ((componentProperty && componentProperty.rowType && componentProperty.rowType == 1) || (!componentProperty.rowType)) { // 普通行\r\n      temp = {\r\n        key: new Date().getTime(),\r\n        rows: [\r\n          {\r\n            \"type\": 1,\r\n            \"data\": \"\",\r\n            \"visible\": \"\",\r\n            \"cells\": [\r\n              {\r\n                \"id\": id,\r\n                \"name\": \"\",\r\n                \"title\": (componentProperty && componentProperty.titlePlaceholder) || label, // labe 若title为占位符怎么取--取titlePlaceholder\r\n                \"data\": placeholder,\r\n                \"param\": (componentProperty && componentProperty.param) || '', //  componentProperty中定义 param:图片下方文案、分隔符内容； titlePlaceholder：title为占位符时\r\n                \"type\": Number(type),\r\n                \"percent\": width || 100,\r\n                \"style\": {\r\n                  \"align\": (valueStyle && valueStyle.align) || 1,\r\n                  \"fontSize\": (valueStyle && valueStyle.fontSize) || 1,\r\n                  \"fontWeight\": (valueStyle && valueStyle.fontWeight) || 1,\r\n                },\r\n                \"visible\": (componentProperty && componentProperty.visiable),\r\n              }\r\n            ]\r\n          },\r\n        ],\r\n        rowIndex: 0,\r\n      }\r\n      mainDataTemp.splice(activeBlock.blockIndex + 1, 0, temp);\r\n      componentActiveTemp.push(item.id);\r\n    } else if (componentProperty && componentProperty.rowType && componentProperty.rowType == 2) { // 列表\r\n      if (componentProperty.json) { // 普通表格直接插入\r\n        temp = {\r\n          key: new Date().getTime(),\r\n          rows: componentProperty.json,\r\n          connection: componentProperty.connection,\r\n        }\r\n        mainDataTemp.push(temp);\r\n        componentActiveTemp.push(item.id);\r\n      } else if (activeBlock.connection === componentProperty.connection) { // 非普通表格判断是否属于当前表格\r\n        let tempShowKeys = [];\r\n        if (showkeys.includes(componentProperty.cellAlias)) { // 属性存在就删除\r\n          tempShowKeys = showkeys.filter(i => i !== componentProperty.cellAlias);\r\n          componentActiveTemp = componentActiveTemp.filter(i => i !== item.id);\r\n          mainDataTemp[activeBlock.blockIndex].rows = getDishList(true, mainDataTemp[activeBlock.blockIndex].rows, componentProperty.cellAlias);\r\n        } else { // 不存在就添加\r\n          tempShowKeys = [...showkeys, componentProperty.cellAlias];\r\n          componentActiveTemp.push(item.id);\r\n          mainDataTemp[activeBlock.blockIndex].rows = getDishList(false, dishTemplate, componentProperty.cellAlias, mainDataTemp[activeBlock.blockIndex].rows, item.id);\r\n        }\r\n        setShowKeys(tempShowKeys);\r\n      } else {\r\n        message.warn('当前选中项不支持此属性');\r\n      }\r\n    }\r\n    setMainData(mainDataTemp);\r\n    setComponentActive(componentActiveTemp);\r\n  };\r\n\r\n  /**\r\n   * 计算不同纸张对应的宽度\r\n   */\r\n  // const pageSize = 80; // 80, 76, 58\r\n  let newWidth = largePageWidth;\r\n  switch (pageSize) {\r\n    case 76:\r\n      newWidth = mdPageWidth;\r\n      break;\r\n    case 58:\r\n      newWidth = smPageWidth;\r\n      break;\r\n    default:\r\n      newWidth = largePageWidth;\r\n  }\r\n  const mainStyle = {\r\n    width: `${newWidth + 17}px`, // 预留出滚动条的宽度\r\n    flex: 'none',\r\n  };\r\n  /**\r\n   * 底部 保存 取消 恢复默认配置\r\n   */\r\n  // 保存\r\n  const handleSave = () => {\r\n    const newContentJson = [];\r\n    const mainDataTemp = deepClone(mainData);\r\n    const renderDatasTemp = deepClone(renderDatas);\r\n    mainDataTemp.forEach((el) => {\r\n      newContentJson.push(...el.rows)\r\n    });\r\n    renderDatasTemp.content && renderDatasTemp.content.rows ? renderDatasTemp.content.rows = newContentJson : '';\r\n    renderDatasTemp.content = renderDatasTemp.content ? JSON.parse(renderDatasTemp.content) : undefined;\r\n    onSubmit && onSubmit(renderDatasTemp);\r\n  };\r\n  // 恢复默认配置\r\n  const handleReset = () => {\r\n    setIsReset(!isReset);\r\n  }\r\n  // 取消\r\n  const handleCancel = () => {\r\n    onCancel && onCancel();\r\n  };\r\n  // console.log('containerRef====', containerRef);\r\n  return isEdit ? (\r\n    <div className=\"bill-templates-component\">\r\n      <div className=\"bill-templates-container\">\r\n        {/* 左侧部分开始 */}\r\n        <div style={{ position: 'relative' }}>\r\n          <div className=\"bill-templates-item bill-templates-tools\">\r\n            <div>\r\n              <div className=\"bill-templates-item-title\">选择票据显示内容</div>\r\n            </div>\r\n            {componentsData.modulesList && componentsData.modulesList.map(item => (\r\n              <div className=\"module\" key={item.id}>\r\n                <div className=\"module-title\">{item.name}</div>\r\n                <div className=\"module-items\">\r\n                  {item.componentList && item.componentList.length\r\n                    ? item.componentList.map(el => (\r\n                      <div\r\n                        key={el.id}\r\n                        className={componentActive.indexOf(el.id) > -1 ? \"module-item module-item-active\" : \"module-item\"}\r\n                        onClick={moduleComponentClick.bind(this, el)}\r\n                        title={el.label}\r\n                      >\r\n                        {el.label}\r\n                      </div>\r\n                    ))\r\n                    : null}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        {/* 左侧部分结束 */}\r\n        {/* 中间部分开始 */}\r\n        <div style={{ position: 'relative' }}>\r\n          <div\r\n            className=\"bill-templates-item bill-templates-main\"\r\n            style={mainStyle}\r\n          >\r\n            <div className=\"bill-templates-item-title bill-templates-item-title2\">\r\n              <span>编辑</span>\r\n              <span className=\"delete-btn\" onClick={handleRemoveRow}>\r\n                <IconDel />\r\n              </span>\r\n            </div>\r\n            <div className=\"bill-templates-edit-body page-font\">\r\n              <DndProvider manager={manager.current.dragDropManager}>\r\n                {mainData.map((block, num) =>\r\n                  <Block\r\n                    key={block.key}\r\n                    block={block}\r\n                    blockIndex={num}\r\n                    onClick={handleBlockClick}\r\n                    activeBlockKey={activeBlock.blockKey}\r\n                    isEdit={true}\r\n                    onCellResize={handleCellResize}\r\n                    moveBlock={moveBlock}\r\n                    moveCell={moveCell}\r\n                    pageSize={pageSize}\r\n                    renderDatas={renderDatas}\r\n                    activeBlock={activeBlock}\r\n                    onUpload={handleUpload}\r\n                    onCancelUpload={handleDeleteUpload}\r\n                  />\r\n                )}\r\n              </DndProvider>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 中间部分结束 */}\r\n        {/* 右侧部分开始 */}\r\n        <div style={{ position: 'relative' }}>\r\n          <div className=\"bill-templates-item bill-templates-style\">\r\n            <div className=\"bill-templates-item-title\">样式编辑</div>\r\n            {isShowStyleEdit ? (\r\n              <div className=\"bill-templates-style-items\">\r\n                {isShowLabelEdit && (\r\n                  <div className=\"bill-templates-style-item\">\r\n                    <div className=\"bill-templates-style-item-label\">\r\n                      编辑文字\r\n                  </div>\r\n                    <div className=\"bill-templates-style-item-value\">\r\n                      <Input\r\n                        placeholder=\"请输入\"\r\n                        className=\"bill-templates-style-item-value-input\"\r\n                        value={activeLabel}\r\n                        onChange={handleChangeLabel}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <div className=\"bill-templates-style-item\">\r\n                  <div className=\"bill-templates-style-item-label\">字号</div>\r\n                  <div className=\"bill-templates-style-item-value\">\r\n                    <div\r\n                      className={\r\n                        fontActive === 4\r\n                          ? 'module-item margin-right-10 margin-bottom-0 module-item-active'\r\n                          : 'module-item margin-right-10 margin-bottom-0'\r\n                      }\r\n                      style={{ marginBottom: 0 }}\r\n                      onClick={moduleItemClick.bind(this, 'fontSize', 4)}\r\n                    >\r\n                      大\r\n                  </div>\r\n                    <div\r\n                      className={\r\n                        fontActive === 1\r\n                          ? 'module-item margin-right-10 margin-bottom-0 module-item-active'\r\n                          : 'module-item margin-right-10 margin-bottom-0'\r\n                      }\r\n                      style={{ marginBottom: 0 }}\r\n                      onClick={moduleItemClick.bind(this, 'fontSize', 1)}\r\n                    >\r\n                      小\r\n                  </div>\r\n                    {/* <div\r\n                  className=\"module-item margin-right-10 margin-bottom-0\"\r\n                  style={{ marginBottom: 0 }}\r\n                  onClick={moduleItemClick}\r\n                >\r\n                  倍高\r\n                </div>\r\n                <div\r\n                  className=\"module-item margin-right-0 margin-bottom-0\"\r\n                  style={{ marginBottom: 0 }}\r\n                  onClick={moduleItemClick}\r\n                >\r\n                  倍宽\r\n                </div> */}\r\n                  </div>\r\n                </div>\r\n                <div className=\"bill-templates-style-item\">\r\n                  <div className=\"bill-templates-style-item-label\">对齐方式</div>\r\n                  <div className=\"bill-templates-style-item-value\">\r\n                    <div\r\n                      className={\r\n                        alignActive === 1\r\n                          ? 'module-item margin-right-10 margin-bottom-0 module-item-active'\r\n                          : 'module-item margin-right-10 margin-bottom-0'\r\n                      }\r\n                      style={{ marginBottom: 0 }}\r\n                      onClick={moduleItemClick.bind(this, 'align', 1)}\r\n                    >\r\n                      居左\r\n                  </div>\r\n                    <div\r\n                      className={\r\n                        alignActive === 2\r\n                          ? 'module-item margin-right-10 margin-bottom-0 module-item-active'\r\n                          : 'module-item margin-right-10 margin-bottom-0'\r\n                      }\r\n                      style={{ marginBottom: 0 }}\r\n                      onClick={moduleItemClick.bind(this, 'align', 2)}\r\n                    >\r\n                      居中\r\n                  </div>\r\n                    <div\r\n                      className={\r\n                        alignActive === 3\r\n                          ? 'module-item margin-right-0 margin-bottom-0 module-item-active'\r\n                          : 'module-item margin-right-0 margin-bottom-0'\r\n                      }\r\n                      style={{ marginBottom: 0 }}\r\n                      onClick={moduleItemClick.bind(this, 'align', 3)}\r\n                    >\r\n                      居右\r\n                  </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bill-templates-style-item\">\r\n                  <div className=\"bill-templates-style-item-label\">分割线</div>\r\n                  <div className=\"bill-templates-style-item-value\">\r\n                    <Switch\r\n                      checked={activeSeparator}\r\n                      onChange={handleChangeSiwtch}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"bill-templates-style-item\">\r\n                  <div className=\"bill-templates-style-item-label\">\r\n                    字体是否加粗\r\n                </div>\r\n                  <div className=\"bill-templates-style-item-value\">\r\n                    <Switch\r\n                      checked={activeFontWeight != 1}\r\n                      onChange={moduleItemClick.bind(this, 'fontWeight', 1)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"bill-templates-style-item\">\r\n                  <div className=\"bill-templates-style-item-label\">插入空行</div>\r\n                  <div className=\"bill-templates-style-item-value\">\r\n                    <Icon type=\"minus-circle\" className=\"bill-templates-style-item-value-icon\" onClick={handleBlankLine.bind(this, 'minus')} />\r\n                    <span>{blankLineNum}</span>\r\n                    <Icon type=\"plus-circle\" className=\"bill-templates-style-item-value-icon\" onClick={handleBlankLine.bind(this, 'add')} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        {/* 右侧部分结束 */}\r\n      </div>\r\n      <Affix offsetBottom={0} style={{ width: '100%', textAlign: 'right', height: 64, lineHeight: '64px', backgroundColor: 'rgba(255, 255, 255, 0.9)' }}>\r\n        <Button className=\"margin-right-10\" onClick={handleReset}>恢复默认</Button>\r\n        <Button className=\"margin-right-10\" onClick={handleCancel}>取消</Button>\r\n        <Button type=\"primary\" onClick={handleSave}>保存</Button>\r\n      </Affix>\r\n    </div >\r\n  )\r\n    : (\r\n      <div\r\n        className=\"bill-templates-item bill-templates-main bill-templates-main-view\"\r\n        style={mainStyle}\r\n      >\r\n        <div className=\"bill-templates-edit-body\">\r\n          <DndProvider DndProvider backend={HTML5Backend}>\r\n            {mainData.map((block, num) =>\r\n              <Block\r\n                key={block.key}\r\n                block={block}\r\n                blockIndex={num}\r\n                onClick={handleBlockClick}\r\n                activeBlockKey={activeBlock.blockKey}\r\n                isEdit={false}\r\n                onCellResize={handleCellResize}\r\n                moveBlock={moveBlock}\r\n                moveCell={moveCell}\r\n                componentsData={renderDatas}\r\n                pageSize={pageSize}\r\n                renderDatas={renderDatas}\r\n                activeBlock={activeBlock}\r\n              />\r\n            )}\r\n          </DndProvider>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","D:\\ryp\\git\\bill-template\\src\\bill-templates\\service.js",[],"D:\\ryp\\git\\bill-template\\src\\bill-templates\\common\\constant.js",[],"D:\\ryp\\git\\bill-template\\src\\bill-templates\\common\\utils.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"import { union, deepClone } from 'lodash';\r\n\r\n/**\r\n * 字体转换 1*1:12px  2*2:24px\r\n * @param fontSize 字体 1：小号；2：倍高；3：倍宽；4：大号；目前仅支持1,4\r\n */\r\nexport function formatCellStyle({\r\n  align = 1,\r\n  fontSize = 1,\r\n  fontWeight = 1,\r\n} = {}) {\r\n  let style = {};\r\n  switch (align) {\r\n    case 1:\r\n      style.align = 'left';\r\n      break;\r\n    case 2:\r\n      style.align = 'center';\r\n      break;\r\n    case 3:\r\n      style.align = 'right';\r\n      break;\r\n  }\r\n  switch (fontWeight) {\r\n    case 1:\r\n      style.fontWeight = 'normal';\r\n      break;\r\n    case 2:\r\n      style.fontWeight = 'bold';\r\n      break;\r\n  }\r\n  switch (fontSize) {\r\n    case 1:\r\n      style.fontSize = '12px';\r\n      break;\r\n    case 4:\r\n      style.fontSize = '24px';\r\n      break;\r\n  }\r\n  return style;\r\n}\r\n/**\r\n * 校验是否是占位符{store} 并返回占位符对应的具体内容;占位符样式：\"data\": \"{orderNo}\" ; \"data\": \"{dinnerType}/{dinnerNumber}\"; \"data\": \"{storeName}门店的{device.deviceId}#机器\"\r\n * @param field 占位符\r\n * @param demoObject 所有占位符对应数据的集合\r\n */\r\nexport function getPlaceholderValue(field = '', demoObject) {\r\n  const regStr = /([{}])/g;\r\n  const regReplace = /(?:\\{([\\w.]+)\\})/g;\r\n  let val = '';\r\n  let str = '';\r\n  val = field && field.replace(regReplace, match => {\r\n    let temp = match.replace(regStr, '');\r\n    // 占位符中含有. 这样的数据格式\r\n    let paramArr;\r\n    if (temp.indexOf('.') > -1 && temp.split('.').length) {\r\n      paramArr = temp.split('.');\r\n      paramArr.forEach(tempEl => {\r\n        demoObject.hasOwnProperty(tempEl)\r\n          ? (demoObject = demoObject[tempEl])\r\n          : null;\r\n      });\r\n      str = demoObject;\r\n    } else if (temp && demoObject && demoObject.hasOwnProperty(temp)) {\r\n      str = demoObject[temp];\r\n    }\r\n    // 是纯文本 不是占位符\r\n    if (!regStr.test(field)) str = field;\r\n    return str;\r\n  });\r\n  return val;\r\n}\r\n/**\r\n * 校验是否是占位符{store} 并返回占位符对应的文本内容;占位符样式：\"data\": \"{orderNo}\" ; \"\r\n * @param field 占位符\r\n */\r\nexport function getPlaceholderKeyStr(field) {\r\n  const regStr = /([{}])/g;\r\n  const regReplace = /(?:\\{([\\w.]+)\\})/g;\r\n  let str = '';\r\n  str = field.replace(regReplace, match => {\r\n    return match.replace(regStr, '');\r\n  });\r\n  return str;\r\n}\r\n\r\n/**\r\n * 返回占位符对应的具体内容;占位符样式：\"data\": \"{orderNo}\" ; \"data\": \"{device.deviceId}\"\r\n * @param field 占位符\r\n * @param demoObject 所有占位符对应数据的集合\r\n */\r\nexport function getPlaceholderValueObj(field, demoObject) {\r\n  const regStr = /([{}])/g;\r\n  let obj = null;\r\n  let temp = field.replace(regStr, '');\r\n  // 占位符中含有. 这样的数据格式\r\n  let paramArr;\r\n  if (temp.indexOf('.') > -1 && temp.split('.').length) {\r\n    paramArr = temp.split('.');\r\n    paramArr.forEach(tempEl => {\r\n      demoObject.hasOwnProperty(tempEl)\r\n        ? (demoObject = demoObject[tempEl])\r\n        : null;\r\n    });\r\n    obj = demoObject;\r\n  } else if (temp && demoObject && demoObject.hasOwnProperty(temp)) {\r\n    obj = demoObject[temp];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * 根据别名获取菜品列表内正在展示的字段（别名）\r\n * @param {*} block 菜品列表所在的list\r\n */\r\nexport function getShowKeys(block = []) {\r\n  let res = [];\r\n  function loop(arr) {\r\n    arr.forEach((item) => {\r\n      if (item.type === 2 && item.childRows && item.childRows.length) {\r\n        return loop(item.childRows);\r\n      }\r\n      if (item.type === 1 && item.cells && item.cells.length) {\r\n        item.cells.forEach(cell => res.push(cell.cellAlias));\r\n      }\r\n    })\r\n  }\r\n  loop(block);\r\n  res = union(res).filter(r => !!r);\r\n  return res;\r\n}\r\n\r\n\r\n/**\r\n * 移除商品列表内为null的节点\r\n * @param {*} dishModel 商品列表\r\n */\r\nfunction removeNullNode(dishModel = []) {\r\n  let res = [];\r\n  const tempDishModal = deepClone(dishModel);\r\n  function loop(arr) { // 获取新的商品list节点\r\n    arr = arr.filter(item => item);\r\n    arr.forEach((item) => {\r\n      if (item.type == 2 && item.childRows && item.childRows.length) {\r\n        item.childRows = item.childRows.filter(item => item);\r\n        loop(item.childRows);\r\n      }\r\n      if (item.type == 1 && item.cells && item.cells.length) {\r\n        item.cells = item.cells.filter(item => item);\r\n        loop(item.cells);\r\n      }\r\n    });\r\n  }\r\n  loop(tempDishModal); // 获取到了新结构\r\n  res = tempDishModal;\r\n  return res;\r\n}\r\n\r\n/**\r\n * 根据别名获取菜品列表展示内容\r\n * @param {*} isRemove 是否是移除\r\n * @param {*} dishModel 全量菜品列表数据模型\r\n * @param {*} key 当前需要展示的别名字段数组\r\n * @param {*} oldDishList 之前正在展示的商品列表数据\r\n * @param {*} id 当前修改的字段对应的id\r\n */\r\nexport function getDishList(isRemove, dishModel = [], key, oldDishList = [], id) {\r\n  let res = [];\r\n  const tempDishModal = deepClone(dishModel);\r\n  const tempOldDishList = deepClone(oldDishList);\r\n  function loopForRemove(arr) { // 移除节点\r\n    arr.forEach((item, index) => {\r\n      if (item.type == 2 && item.childRows && item.childRows.length) {\r\n        loopForRemove(item.childRows);\r\n      }\r\n      if (item.type == 1 && item.cells && item.cells.length) {\r\n        const temp = item.cells.filter(cell => key === cell.cellAlias);\r\n        item.cells = item.cells.filter(cell => !cell.cellAlias || key != cell.cellAlias);\r\n        if (!item.cells.length) {\r\n          arr[index] = null;\r\n        } else {\r\n          if (temp.length) {\r\n            // 兄弟节点宽度调整\r\n            const newNodeWidth = Number(temp[0].percent);\r\n            item.cells.forEach(cell => Math.floor(cell.percent = Number(cell.percent) / (100 - newNodeWidth) * 100))\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  function loopForAdd(tmaplates, old) { // 增加节点\r\n    tmaplates.forEach((item, index) => {\r\n      if (item.type == 2 && item.childRows && item.childRows.length) {\r\n        loopForAdd(item.childRows, old[index] ? old[index].childRows : old[index - 1].childRows); // 仅适用于当前商品list：2020-01-07\r\n      }\r\n      if (item.type == 1 && item.cells && item.cells.length) {\r\n        const temp = item.cells.filter(cell => key === cell.cellAlias);\r\n        if (temp.length) {\r\n          if (item.cells.length === 1) { // 新增行\r\n            item.cells[0].id = id;\r\n            old.splice(index, 0, item);\r\n          } else { // 新增列\r\n            // 兄弟节点宽度调整\r\n            const newNodeWidth = Number(temp[0].percent);\r\n            old[index].cells.forEach((cell, index) => cell.percent = Number(cell.percent) * (100 - newNodeWidth) / 100);\r\n            old[index].cells.push({ ...temp[0], id });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  if (isRemove) { // 移除\r\n    loopForRemove(tempDishModal);\r\n    res = removeNullNode(tempDishModal);\r\n  } else { // 新增\r\n    loopForAdd(tempDishModal, tempOldDishList);\r\n    res = tempOldDishList;\r\n  }\r\n  console.log(\"🚀 ~ file: utils.js ~ line 217 ~ getDishList ~ res\", res)\r\n  return res;\r\n}\r\n\r\n/**\r\n * 校验当前row内是否包含当前组件\r\n * @param {*} componentId 组件id\r\n * @param {*} row 当前校验row\r\n * @returns boolean\r\n */\r\nexport function hasComponentInList(componentId, row = {}) {\r\n  let res = false;\r\n  function loop(id, list = {}) { // 递归校验组件id\r\n    if (list.childRows && list.childRows.length) {\r\n      list.childRows.forEach(item => loop(id, item));\r\n      return;\r\n    }\r\n    if (list.cells && list.cells.length) {\r\n      list.cells.forEach(item => res = res || (item.id == id));\r\n    }\r\n  }\r\n  loop(componentId, row);\r\n  return res;\r\n}\r\n\r\n/**\r\n * 校验当前block内文本型cell的字号|对齐|加粗属性,返回数组长度为1，则block内属性一致，数组长度大于1，则当前block内字体属性不一致\r\n * @param {*} block \r\n * @param {*} propName \r\n * @returns string[] 当前block内当前属性所有值（去重）\r\n */\r\nexport function checkProps(rows = [], propName) {\r\n  let res = [];\r\n  function loop(arr) {\r\n    arr.forEach(row => {\r\n      if (row.childRows && row.childRows.length) {\r\n        loop(row.childRows);\r\n      }\r\n      if (row.cells && row.cells.length) {\r\n        row.cells.forEach(item => {\r\n          if (item.type == 1 && item.style) {\r\n            res.push(Number(item.style[propName]));\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  loop(rows);\r\n  return union(res);\r\n}","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\block\\index.jsx",["89","90","91","92","93","94","95","96","97","98"],"import React, { useRef, useEffect } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport IconRowDrag from '../../../assets/svgs/row_drag.svg';\r\nimport Row from '../row';\r\nimport ListRow from '../lsit-row';\r\nimport { ItemType } from '../../common/constant';\r\nimport './style.less';\r\n\r\nexport default function Block({\r\n  block = {},\r\n  blockIndex,\r\n  onClick,\r\n  activeBlockKey,\r\n  isEdit,\r\n  onCellResize,\r\n  moveBlock,\r\n  moveCell,\r\n  pageSize,\r\n  renderDatas,\r\n  activeBlock,\r\n  onUpload,\r\n  onCancelUpload,\r\n}) {\r\n  const ref = useRef();\r\n  const moveBtn = useRef();\r\n  const ref_out_top = useRef();\r\n  const ref_out_bottom = useRef();\r\n  const ref_cell_box = useRef();\r\n\r\n  // 可放置（全部）\r\n  const [{ dropClassName, isOver, dragToTop }, drop] = useDrop({\r\n    accept: ItemType.row,\r\n    collect: monitor => {\r\n      const { blockIndex: dragIndex } = monitor.getItem() || {};\r\n      if (dragIndex === blockIndex) {\r\n        return {};\r\n      }\r\n      return {\r\n        isOver: monitor.isOver(),\r\n        dropClassName: ' bill-templates-row-move-preview-inner',\r\n        dragToTop: dragIndex > blockIndex,\r\n      };\r\n    },\r\n  });\r\n  // 可放置（内部）\r\n  const [{ canDropInner }, dropIn] = useDrop({\r\n    accept: ItemType.row,\r\n    canDrop: item => {\r\n      // 可放置内部条件：1.内部仅有一个纯文本cell\r\n      const tempTextCell = block.rows[block.rowIndex].cells && block.rows[block.rowIndex].cells.filter(i => i.type === 1) || [];\r\n      return !!(\r\n        item.is_text &&\r\n        tempTextCell.length === 1 &&\r\n        (item.canTwoCell || item.isCell)\r\n      );\r\n    },\r\n    collect: monitor => {\r\n      const { blockIndex: dragIndex } = monitor.getItem() || {};\r\n      if (dragIndex === blockIndex) {\r\n        return {};\r\n      }\r\n      return {\r\n        canDropInner: monitor.canDrop(),\r\n      };\r\n    },\r\n    drop: item => {\r\n      console.log('183内部', item);\r\n      const { isCell, rowIndex, blockIndex: dragBlock, index: cellIndex } = item;\r\n      if (isCell) {\r\n        // 两列中的一列拖入\r\n        moveCell(cellIndex, rowIndex, dragBlock, 1, block.rowIndex, blockIndex);\r\n      } else {\r\n        // 一行拖入\r\n        moveCell(0, rowIndex, dragBlock, 1, block.rowIndex, blockIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  // 可放置（外部上）\r\n  const [, dropOutTop] = useDrop({\r\n    accept: ItemType.row,\r\n    drop: item => {\r\n      console.log('外部上', item);\r\n      const { index, blockIndex: dragIndex, isCell, rowIndex } = item;\r\n      if (isCell) {\r\n        // 两列其中一列拖出来变行\r\n        moveCell(index, dragIndex, rowIndex, 0, block.rowIndex, blockIndex, 'top');\r\n      } else {\r\n        moveBlock(dragIndex, blockIndex);\r\n      }\r\n    },\r\n  });\r\n  // 可放置（外部下）\r\n  const [, dropOutBottom] = useDrop({\r\n    accept: ItemType.row,\r\n    drop: item => {\r\n      console.log('外部下', item);\r\n      const { index, blockIndex: dragIndex, isCell, rowIndex } = item;\r\n      if (isCell) {\r\n        // 两列其中一列拖出来变行\r\n        moveCell(index, rowIndex, dragIndex, 0, block.rowIndex, blockIndex, 'bottom');\r\n      } else {\r\n        moveBlock(dragIndex, blockIndex);\r\n      }\r\n    },\r\n  });\r\n\r\n  // 可拖拽\r\n  const [, drag, preview] = useDrag({\r\n    item: {\r\n      blockKey: block.key,\r\n      type: ItemType.row,\r\n      rowIndex: block.rowIndex,\r\n      blockIndex,\r\n      canTwoCell: !!(block.rows[block.rowIndex] && block.rows[block.rowIndex].cells && block.rows[block.rowIndex].cells.length === 1),\r\n      is_text: block.rows[block.rowIndex] && block.rows[block.rowIndex].type === 1 && block.rows[block.rowIndex].cells &&\r\n        block.rows[block.rowIndex].cells.length &&\r\n        block.rows[block.rowIndex].cells[0].type === 1,\r\n    },\r\n    canDrag: isEdit,\r\n    begin: () => { // 取消选中行\r\n      onClick({});\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    drop(ref);\r\n    preview(ref);\r\n    dropIn(ref_cell_box);\r\n    dropOutTop(ref_out_top);\r\n    dropOutBottom(ref_out_bottom);\r\n    activeBlockKey === block.key && (block.rowIndex !== undefined && block.rows[block.rowIndex].cells && block.rows[block.rowIndex].cells.length > 1 || activeBlock.isListBlock)\r\n      ? drag(moveBtn)\r\n      : drag(ref);\r\n  }, [block, activeBlockKey])\r\n\r\n  // 处理block点击\r\n  const handleBlockClick = () => {\r\n    if (activeBlockKey !== block.key && isEdit) { // 仅非选中row切在编辑状态下可点击\r\n      let isListBlock = false; // 是否为列表block\r\n      block.rows.forEach(row => isListBlock = isListBlock || row.type === 2);\r\n      onClick({ blockKey: block.key, blockIndex, rowIndex: block.rowIndex, isListBlock, connection: block.connection });\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={`bill-templates-block ${activeBlockKey === block.key ? 'bill-templates-block-active' : ''\r\n        }`}\r\n      onClick={handleBlockClick}\r\n      ref={ref}\r\n    >\r\n      <div\r\n        ref={ref_out_top}\r\n        className=\"drop-area-out\"\r\n        style={{ display: isOver && dragToTop ? 'block' : 'none' }}\r\n      />\r\n      <div\r\n        ref={ref_cell_box}\r\n        className={`bill-templates-cell-boxs${isOver && canDropInner ? dropClassName : ''\r\n          }`}\r\n      >\r\n        {block.rows.map((item, index) => {\r\n          let result = null;\r\n          switch (item.type) {\r\n            case 1:\r\n              result = (\r\n                <Row\r\n                  blockActive={activeBlockKey === block.key}\r\n                  data={{ ...item, row_id: `${blockIndex}-${index}` }}\r\n                  index={index}\r\n                  blockIndex={blockIndex}\r\n                  isEdit={isEdit}\r\n                  onCellResize={onCellResize}\r\n                  onClick={onClick}\r\n                  moveCell={moveCell}\r\n                  pageSize={pageSize}\r\n                  renderDatas={renderDatas}\r\n                  onUpload={onUpload}\r\n                  onCancelUpload={onCancelUpload}\r\n                />\r\n              );\r\n              break;\r\n            case 2:\r\n              result = (\r\n                <ListRow\r\n                  blockActive={activeBlockKey === block.key}\r\n                  data={{ ...item, row_id: `${blockIndex}-${index}` }}\r\n                  index={index}\r\n                  blockIndex={blockIndex}\r\n                  isEdit={isEdit}\r\n                  onCellResize={onCellResize}\r\n                  onClick={onClick}\r\n                  moveCell={moveCell}\r\n                  pageSize={pageSize}\r\n                  renderDatas={renderDatas.demoObject || {}}\r\n                />\r\n              );\r\n            default:\r\n          }\r\n          return result;\r\n        })}\r\n      </div>\r\n      <div\r\n        ref={ref_out_bottom}\r\n        className=\"drop-area-out\"\r\n        style={{ display: isOver && !dragToTop ? 'block' : 'none' }}\r\n      />\r\n      <div\r\n        ref={moveBtn}\r\n        className=\"bill-templates-row-move-btn\"\r\n        style={{\r\n          cursor:\r\n            activeBlockKey === block.key && block.rows[block.rowIndex] && (block.rows[block.rowIndex].cells && block.rows[block.rowIndex].cells.length > 1 || activeBlock.isListBlock)\r\n              ? 'move'\r\n              : 'unset',\r\n        }}\r\n      >\r\n        {activeBlockKey === block.key && (block.rows[block.rowIndex] && block.rows[block.rowIndex].cells && block.rows[block.rowIndex].cells.length > 1 || activeBlock.isListBlock) ? (\r\n          <IconRowDrag />\r\n        ) : null}\r\n      </div>\r\n    </div>);\r\n}","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\row\\index.jsx",["99","100","101","102","103"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport { deepClone } from 'lodash';\r\nimport { getPlaceholderValue } from '../../common/utils';\r\nimport Cell from '../cell';\r\nimport * as CellComponents from '../index';\r\nimport { queryImgUrl } from '../../service';\r\nimport './style.less';\r\n\r\nexport default function Row({\r\n  blockActive,\r\n  data = {},\r\n  index,\r\n  blockIndex,\r\n  isEdit = true,\r\n  onCellResize,\r\n  renderDatas = {}, // 模板详情数据\r\n  moveCell,\r\n  pageSize,\r\n  className = \"\",\r\n  onUpload,\r\n  onCancelUpload,\r\n}) {\r\n  const ref = useRef();\r\n  const ref_cell_box_flex = useRef();\r\n\r\n  // children\r\n  const [childrenNode, setChildren] = useState(null);\r\n  // row宽度\r\n  const [rowWidth, setRowWidth] = useState(318);\r\n  // cell宽度占比\r\n  const [cellWidth, setCellWidth] = useState([]);\r\n\r\n\r\n\r\n  // 调整cell宽度\r\n  const handleResize = () => {\r\n    const cellWidthTemp = [];\r\n    ref_cell_box_flex.current.childNodes.forEach(i =>\r\n      cellWidthTemp.push(\r\n        Math.floor(((i.clientWidth || i.offsetWidth) / rowWidth) * 100)\r\n      )\r\n    );\r\n    setCellWidth(cellWidthTemp);\r\n    onCellResize && onCellResize(cellWidthTemp, blockIndex, index);\r\n  };\r\n  // 获取需渲染children\r\n  const getChildren = rowWidthNew => {\r\n    const result =\r\n      data.cells && data.cells.length\r\n        ? data.cells.map((item, number) => {\r\n          const { type: newType, id, param, style } = item;\r\n          const type = Number(newType);\r\n          let CellItem;\r\n          // 组件类型\r\n          if (type === 2 || type === 3 || type === 4) {\r\n            CellItem = CellComponents.UploadCell;\r\n          } else {\r\n            CellItem = CellComponents.TextCell;\r\n          }\r\n          let demoObjectTemp = deepClone(renderDatas.demoObject);\r\n          let allComponentList = []; // 所有的组件数据\r\n          let allObjectList = renderDatas.objectList || []; // 所有的图片、二维码数据\r\n          renderDatas.modulesList &&\r\n            renderDatas.modulesList.length &&\r\n            renderDatas.modulesList.forEach(listEl => {\r\n              allComponentList.push(...listEl.componentList);\r\n            });\r\n          const regStr = /([{}])/g;\r\n          // data占位符处理 图片和二维码的占位符不处理\r\n          let newData = item.data;\r\n          newData =\r\n            (type === 2 || type === 3 || type === 4)\r\n              ? item.data\r\n              : getPlaceholderValue(newData, demoObjectTemp);\r\n          // title占位符处理\r\n          let newTitle = item.title;\r\n          newTitle = getPlaceholderValue(newTitle, demoObjectTemp);\r\n          // param占位符处理\r\n          let newParam = item.param;\r\n          newParam = getPlaceholderValue(newParam, demoObjectTemp);\r\n          // 文字类型: 需要拼接上label\r\n          if (type === 1) {\r\n            newData = (item.name || newTitle) + newData;\r\n          }\r\n          // console.log('temp===' + item.title, newData, item);\r\n          // 从componentsData中获取对应cell的相关数据：buttonLabel, readOnly\r\n          let buttonLabel = '';\r\n          let readOnly = false;\r\n          if (type === 2 || type === 4) {\r\n            allComponentList.forEach(el => {\r\n              if (el.id === id && el.componentProperty) {\r\n                buttonLabel = el.componentProperty.buttonLabel\r\n                  ? el.componentProperty.buttonLabel\r\n                  : null;\r\n                readOnly = el.componentProperty.readOnly;\r\n              }\r\n            });\r\n          }\r\n          // 图片、二维码 读取componentsData中objectList字段的内容; 上传logo的data占位符：'{shopLogo}'\r\n          if (type === 2 || type === 3 || type === 4) {\r\n            if (item.data === '{shopLogo}') {\r\n              newData = item.data;\r\n            } else {\r\n              const dataTemp = item.data && item.data.replace(regStr, '');\r\n              newData = '';\r\n              newParam = '';\r\n              allObjectList.forEach((el) => {\r\n                if (el.placeholder === dataTemp) {\r\n                  newData = el.objectValue;\r\n                }\r\n                if (el.placeholder === item.param.replace(regStr, '')) {\r\n                  newParam = el.customText;\r\n                }\r\n              });\r\n            }\r\n          }\r\n          // cell是否可见 0:data存在时可见；目前默认只有0\r\n          let newVisible = item.visible ? item.visible.substring(item.visible.length - 1) : true;\r\n          if (newVisible === '0') {\r\n            newVisible = item.data ? true : false;\r\n          }\r\n\r\n          // 调整宽度按钮\r\n          const axis = number < data.cells.length ? 'x' : 'none';\r\n          // 是否可拖拽\r\n          const canDrag = isEdit && data.cells.length > 1 && type === 1;\r\n\r\n          return (\r\n            <Cell\r\n              key={`${data.row_id}-${item.id}-${number}`}\r\n              parentWidth={rowWidthNew}\r\n              resizeable={blockActive && type === 1 && data.cells.length > 1}\r\n              axis={axis}\r\n              onResize={handleResize}\r\n              width={cellWidth[number]}\r\n              canDrag={canDrag}\r\n              parentRef={ref}\r\n              data={item}\r\n              rowIndex={index}\r\n              rowId={data.id}\r\n              cellIndex={number}\r\n              brother={data.cells.length}\r\n              moveCell={moveCell}\r\n              blockIndex={blockIndex}\r\n            >\r\n              {\r\n                newVisible &&\r\n                <CellItem\r\n                  pageSize={pageSize}\r\n                  type={type}\r\n                  data={newData}\r\n                  param={newParam}\r\n                  style={style}\r\n                  buttonLabel={buttonLabel}\r\n                  readOnly={readOnly}\r\n                  onUpload={onUpload}\r\n                  onCancelUpload={onCancelUpload}\r\n                  originData={item.data}\r\n                />\r\n              }\r\n            </Cell>\r\n          );\r\n        })\r\n        : null;\r\n    setChildren(result);\r\n  };\r\n\r\n  // 获取cell宽度,注册拖动\r\n  useEffect(() => {\r\n    const tempCellWidth =\r\n      data.cells && data.cells.length\r\n        ? data.cells.map(item => item.percent || 100)\r\n        : [];\r\n    setCellWidth(tempCellWidth);\r\n  }, [data]);\r\n\r\n  // 渲染子节点\r\n  useEffect(() => {\r\n    const tempWidth = ref.current.clientWidth || ref.current.offsetWidth || 318;\r\n    setRowWidth(tempWidth);\r\n    getChildren(tempWidth);\r\n  }, [data, blockActive, cellWidth]);\r\n\r\n  // 列表内双击选中row\r\n  const handleDobuleClick = () => {\r\n    console.log('双击了')\r\n    onDoubleClick && onDoubleClick();\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      key={data.row_id}\r\n      className={`bill-templates-row ${blockActive ? 'bill-templates-row-active' : ''\r\n        } ${className}`}\r\n      onDoubleClick={handleDobuleClick}\r\n    >\r\n      <div className=\"bill-templates-cell-boxs-flex\" ref={ref_cell_box_flex}>{childrenNode}</div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\lsit-row\\index.jsx",["104"],"import React, { useState, useEffect } from 'react';\r\nimport Row from '../row';\r\nimport { getPlaceholderKeyStr } from '../../common/utils';\r\nimport './style.less';\r\n\r\nexport default function List({\r\n  data = {},\r\n  renderDatas = {}, // dishTemplate: \t菜品模板数据的json\r\n  index,\r\n  blockIndex,\r\n  isEdit,\r\n  onCellResize,\r\n  onDoubleClick,\r\n  moveCell,\r\n  pageSize,\r\n  blockActive,\r\n}) {\r\n  // 子节点\r\n  const [childNodes, setChildNodes] = useState(null);\r\n  // 递归渲染列表结构\r\n  function getChildNodes(row, mock) {\r\n    function recursionChild(item, mockObj) {\r\n      if (item.type ===2 && item.childRows && item.childRows.length) {\r\n        const tempKey = getPlaceholderKeyStr(item.data);\r\n        return (mockObj[tempKey] && mockObj[tempKey].length ? mockObj[tempKey].map(mock => <div className=\"bill-template-list-row\">{item.childRows.map(child => recursionChild(child, mock))}</div>): null)\r\n      }\r\n      if (item.type === 1 && item.cells && item.cells.length) {\r\n        return (\r\n          <Row\r\n            blockActive={false}\r\n            data={{ ...item, row_id: `${blockIndex}-${index}` }}\r\n            index={0}\r\n            blockIndex={blockIndex}\r\n            isEdit={isEdit}\r\n            onCellResize={onCellResize}\r\n            onDoubleClick={onDoubleClick}\r\n            moveCell={moveCell}\r\n            pageSize={pageSize}\r\n            renderDatas={{ demoObject: mockObj }}\r\n            className=\"\"\r\n          />\r\n        )\r\n      }\r\n    }\r\n    return recursionChild(row, mock);\r\n  }\r\n\r\n  // 获取多列的宽度占比\r\n\r\n  // 设置整个结构内的cell的宽度，一列的为100%，多列的按调整后的比例赋值\r\n  \r\n  useEffect(() => {\r\n    const list = getChildNodes(data, renderDatas);\r\n    setChildNodes(list);\r\n  }, [data])\r\n  return (\r\n  <div className=\"bill-template-list\">\r\n    {childNodes}\r\n  </div>);\r\n}\r\n","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\index.jsx",[],"D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\cell\\index.jsx",["105","106","107"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { ResizableBox } from 'react-resizable';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { ItemType } from '../../common/constant';\r\nimport IconCellDrag from '../../../assets/svgs/cell_drag.svg';\r\nimport 'react-resizable/css/styles.css';\r\nimport './style.less';\r\n\r\nexport default function Cell({\r\n  children,\r\n  width = 100,\r\n  parentWidth,\r\n  data = {},\r\n  resizeable = false,\r\n  onResize,\r\n  axis = 'none',\r\n  canDrag = false,\r\n  blockIndex,\r\n  rowIndex,\r\n  rowId,\r\n  cellIndex,\r\n  brother,\r\n  moveCell,\r\n}) {\r\n  const ref = useRef();\r\n  // 可调节宽度\r\n  const [resizeWidth, setWidth] = useState(null);\r\n  // cell活动状态\r\n  const [resizeActive, setActive] = useState(false);\r\n  // 可放置\r\n  const [dropProps = {}, drop] = useDrop({\r\n    accept: ItemType.row,\r\n    canDrop: item => {\r\n      return item.blockIndex === blockIndex && item.is_text && item.isCell;\r\n    },\r\n    collect: monitor => {\r\n      const { cellId: dragCellId, index: dragCellIndex, rowId: dragRowId, blockIndex: dragBlockIndex,rowIndex: dragRowIndex, isCell } = monitor.getItem() || {};\r\n      if (isCell && dragBlockIndex === blockIndex) { // 拖动的为同行cell时\r\n        console.log(\"cell====dragCellIndex,cellIndex\", dragCellIndex, cellIndex)\r\n        if (dragCellIndex === cellIndex) {\r\n          return {};\r\n        }\r\n        return {\r\n            isOver: monitor.isOver(),\r\n            dropClassName:\r\n            dragCellIndex < cellIndex\r\n                ? ' bill-templates-cell-move-preview-right'\r\n                : ' bill-templates-cell-move-preview-left',\r\n          };\r\n        }\r\n      },\r\n      drop: item => {\r\n        const { index: dragCellIndex, blockIndex: dragBlockIndex, rowIndex: dragRowIndex } = item;\r\n        console.log('183 cell li', item)\r\n        moveCell(dragCellIndex, dragRowIndex, dragBlockIndex, cellIndex, rowIndex, blockIndex);\r\n    },\r\n  });\r\n  // 可拖拽\r\n  const [, drag, preview] = useDrag({\r\n    item: { cellId: data.id, type: ItemType.row, blockIndex, rowIndex, rowId, index: cellIndex, isCell: true, is_text: data.type === 1 },\r\n    canDrag,\r\n  });\r\n  drop(ref);\r\n  preview(ref);\r\n  // 宽度变化时\r\n  useEffect(() => {\r\n    const tempWidth = (parentWidth * width) / 100;\r\n    setWidth(tempWidth || 60);\r\n  }, [width, parentWidth]);\r\n\r\n  // 宽度调整开始\r\n  const onResizeStart = () => {\r\n    setActive(true);\r\n  };\r\n\r\n  // 宽度调整结束\r\n  const onResizeStop = () => {\r\n    setActive(false);\r\n    onResize && onResize();\r\n  };\r\n\r\n  return resizeable ? (\r\n    <ResizableBox\r\n      width={resizeWidth}\r\n      axis={axis}\r\n      onResizeStart={onResizeStart}\r\n      onResizeStop={onResizeStop}\r\n      resizeHandles={axis === 'x' ? ['e'] : []}\r\n      minConstraints={[60]}\r\n    >\r\n      <div\r\n        className={`bill-templates-cell bill-templates-cell-resize\r\n          ${resizeActive ? ' bill-templates-cell-resize-active' : ''}\r\n          ${dropProps.isOver ? dropProps.dropClassName : ''}\r\n        `}\r\n        ref={ref}\r\n      >\r\n        {children}\r\n        {canDrag && data.type === 1 && <div ref={drag} className=\"bill-templates-cell-drag-btn\" >\r\n          <IconCellDrag width=\"100%\" height={8} style={{ verticalAlign: 'text-top' }} /></div>}\r\n      </div>\r\n    </ResizableBox>\r\n  ) : (\r\n    <div\r\n      ref={ref}\r\n      className=\"bill-templates-cell\"\r\n      style={{ width: `${width}%` }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\text-cell\\index.jsx",[],"D:\\ryp\\git\\bill-template\\src\\bill-templates\\components\\upload\\index.jsx",["108","109","110","111","112","113"],"import React, { useState, useEffect } from 'react';\r\nimport { Upload, Icon, message, Button } from 'antd';\r\nimport QRCode from 'qrcode.react';\r\nimport createHashHistory from 'history/createHashHistory';\r\nimport { formatCellStyle } from '../../common/utils';\r\nimport {\r\n  qrCodeSize,\r\n  barCodeSize,\r\n  smBarCodeSize,\r\n  customImgSize,\r\n} from '../../common/constant';\r\nimport './style.less';\r\nconst history = createHashHistory();\r\nexport default function UploadCell({\r\n  pageSize = 80, // 纸张类型80--48,76--42,58--32\r\n  type = 4, // 2二维码,3条形码,4自动定义图片, 品牌logo\r\n  param = '自定义文本', // 图片下方的文案\r\n  data = null, // 图片地址\r\n  style = { align: 1, fontSize: 4, fontWeight: 2 }, // 节点样式\r\n  readOnly = false, // 是否显示上传按钮; 仅自定义图片、自定义二维码支持上传\r\n  buttonLabel = '上传图片', // 按钮文字\r\n  onUpload, // 上传\r\n  onCancelUpload, // 删除上传的图片\r\n  originData,\r\n}) {\r\n  // LG-9E02347F546B7271F8D07FCA54964DDC-zh_CN  http://facebook.github.io/react/\r\n  // const [imgUrl, setImgUrl] = useState('https://p0.meituan.net/rmscashier/80866718a8c8321c72556ef19ac60b2582112.png');\r\n  const [imgUrl, setImgUrl] = useState(data === '{shopLogo}' ? null : data);\r\n  const [imgKey, setKey] = useState(null);\r\n  const { align, fontSize, fontWeight } = formatCellStyle(style);\r\n  // useEffect(() => { }, [imgUrl]);\r\n  // 外层样式\r\n  const boxStyle = {\r\n    alignItems:\r\n      align === 'left'\r\n        ? 'flex-start'\r\n        : align === 'right'\r\n          ? 'flex-end'\r\n          : 'center',\r\n  };\r\n  // 自定义文案\r\n  const textStyle = {\r\n    textAlign: align,\r\n    fontSize,\r\n    fontWeight,\r\n  };\r\n  // 上传props\r\n  const props = {\r\n    showUploadList: false,\r\n    customRequest: options => {\r\n      onUpload && onUpload(options, originData);\r\n    }\r\n  };\r\n  // 删除图片\r\n  const handleDelImg = () => {\r\n    onCancelUpload && onCancelUpload(originData);\r\n  };\r\n  // 点击上传logo\r\n  const handleClickUpload = () => {\r\n    if (data === '{shopLogo}') {\r\n      history.push({\r\n        pathname: '/setting/brandLogo'\r\n      })\r\n    }\r\n  };\r\n  // 上传按钮\r\n  const uploadButton = (\r\n    <div className=\"upload-button\" onClick={handleClickUpload}>\r\n      <Button>\r\n        <Icon type=\"upload\" /> {buttonLabel || '上传图片'}\r\n      </Button>\r\n    </div>\r\n  );\r\n  // 图片宽度计算 pos上二维码320*320、条形码480*120 + 58纸384*96\r\n  let newWidth = customImgSize.width;\r\n  let newHeight = null;\r\n  switch (type) {\r\n    case 4:\r\n      newWidth = customImgSize.width;\r\n      break;\r\n    case 2:\r\n      newWidth = qrCodeSize.width;\r\n      newHeight = qrCodeSize.height;\r\n      break;\r\n    case 3:\r\n      if (pageSize === 58) {\r\n        newWidth = smBarCodeSize.width;\r\n        newHeight = smBarCodeSize.height;\r\n      } else {\r\n        newWidth = barCodeSize.width;\r\n        newHeight = barCodeSize.height;\r\n      }\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n  const previewStyle = {\r\n    width: `${newWidth}px`,\r\n    height: newHeight ? `${newHeight}px` : 'auto',\r\n  };\r\n  // console.log('imgUrl----' + buttonLabel, align);\r\n  return (\r\n    <div className=\"upload-box\" style={boxStyle}>\r\n      {!readOnly && data !== '{shopLogo}' && (\r\n        <Upload {...props}>{imgUrl && imgUrl !== 'null' ? null : uploadButton}</Upload>\r\n      )}\r\n      {!readOnly && data === '{shopLogo}' && uploadButton}\r\n      {(imgUrl && imgUrl !== 'null') ? (\r\n        <div style={{ border: '2px solid gray' }}>\r\n          <div className=\"preview-box\" style={previewStyle}>\r\n            {type === 4 ? (\r\n              <img src={imgUrl} className=\"preview-img\" />\r\n            ) : (\r\n                <QRCode value={imgUrl} size={newWidth} />\r\n              )}\r\n            {\r\n              (!data || data === 'null') && <span className=\"overlayer\"></span>\r\n            }\r\n            {\r\n              (!data || data === 'null') && <Icon type=\"delete\" className=\"del-icon\" onClick={handleDelImg} />\r\n            }\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n      {param && <div style={textStyle}>{param}</div>}\r\n    </div>\r\n  );\r\n}\r\n",["114","115"],{"ruleId":"116","severity":1,"message":"117","line":4,"column":8,"nodeType":"118","messageId":"119","endLine":4,"endColumn":11},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"116","severity":1,"message":"124","line":61,"column":25,"nodeType":"118","messageId":"119","endLine":61,"endColumn":33},{"ruleId":"116","severity":1,"message":"125","line":310,"column":40,"nodeType":"118","messageId":"119","endLine":310,"endColumn":45},{"ruleId":"126","severity":2,"message":"127","line":384,"column":123,"nodeType":"118","messageId":"128","endLine":384,"endColumn":128},{"ruleId":"129","severity":1,"message":"130","line":601,"column":6,"nodeType":"131","endLine":601,"endColumn":31,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":13,"column":3,"nodeType":"135","messageId":"136","endLine":23,"endColumn":4},{"ruleId":"133","severity":1,"message":"134","line":24,"column":3,"nodeType":"135","messageId":"136","endLine":31,"endColumn":4},{"ruleId":"133","severity":1,"message":"134","line":32,"column":3,"nodeType":"135","messageId":"136","endLine":39,"endColumn":4},{"ruleId":"137","severity":2,"message":"138","line":59,"column":9,"nodeType":"139","messageId":"140","endLine":61,"endColumn":18},{"ruleId":"137","severity":2,"message":"138","line":101,"column":7,"nodeType":"139","messageId":"140","endLine":103,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":144,"column":21,"nodeType":"143","messageId":"144","endLine":144,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":148,"column":21,"nodeType":"143","messageId":"144","endLine":148,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":173,"column":21,"nodeType":"143","messageId":"144","endLine":173,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":176,"column":21,"nodeType":"143","messageId":"144","endLine":176,"endColumn":23},{"ruleId":"141","severity":1,"message":"145","line":178,"column":71,"nodeType":"143","messageId":"144","endLine":178,"endColumn":73},{"ruleId":"141","severity":1,"message":"142","line":193,"column":21,"nodeType":"143","messageId":"144","endLine":193,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":196,"column":21,"nodeType":"143","messageId":"144","endLine":196,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":237,"column":56,"nodeType":"143","messageId":"144","endLine":237,"endColumn":58},{"ruleId":"141","severity":1,"message":"142","line":259,"column":25,"nodeType":"143","messageId":"144","endLine":259,"endColumn":27},{"ruleId":"146","severity":1,"message":"147","line":50,"column":61,"nodeType":"148","messageId":"149","endLine":50,"endColumn":63},{"ruleId":"146","severity":1,"message":"147","line":50,"column":123,"nodeType":"148","messageId":"149","endLine":50,"endColumn":125},{"ruleId":"146","severity":1,"message":"147","line":132,"column":103,"nodeType":"148","messageId":"149","endLine":132,"endColumn":105},{"ruleId":"146","severity":1,"message":"147","line":132,"column":150,"nodeType":"148","messageId":"149","endLine":132,"endColumn":152},{"ruleId":"129","severity":1,"message":"150","line":135,"column":6,"nodeType":"131","endLine":135,"endColumn":29,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":198,"column":13,"nodeType":"154","messageId":"155","endLine":198,"endColumn":21},{"ruleId":"146","severity":1,"message":"147","line":213,"column":109,"nodeType":"148","messageId":"149","endLine":213,"endColumn":111},{"ruleId":"146","severity":1,"message":"147","line":213,"column":156,"nodeType":"148","messageId":"149","endLine":213,"endColumn":158},{"ruleId":"146","severity":1,"message":"147","line":218,"column":106,"nodeType":"148","messageId":"149","endLine":218,"endColumn":108},{"ruleId":"146","severity":1,"message":"147","line":218,"column":153,"nodeType":"148","messageId":"149","endLine":218,"endColumn":155},{"ruleId":"116","severity":1,"message":"156","line":6,"column":10,"nodeType":"118","messageId":"119","endLine":6,"endColumn":21},{"ruleId":"116","severity":1,"message":"157","line":51,"column":38,"nodeType":"118","messageId":"119","endLine":51,"endColumn":43},{"ruleId":"129","severity":1,"message":"158","line":182,"column":6,"nodeType":"131","endLine":182,"endColumn":36,"suggestions":"159"},{"ruleId":"126","severity":2,"message":"160","line":187,"column":5,"nodeType":"118","messageId":"128","endLine":187,"endColumn":18},{"ruleId":"126","severity":2,"message":"160","line":187,"column":22,"nodeType":"118","messageId":"128","endLine":187,"endColumn":35},{"ruleId":"129","severity":1,"message":"161","line":55,"column":6,"nodeType":"131","endLine":55,"endColumn":12,"suggestions":"162"},{"ruleId":"116","severity":1,"message":"163","line":37,"column":23,"nodeType":"118","messageId":"119","endLine":37,"endColumn":33},{"ruleId":"116","severity":1,"message":"164","line":37,"column":64,"nodeType":"118","messageId":"119","endLine":37,"endColumn":73},{"ruleId":"116","severity":1,"message":"165","line":37,"column":112,"nodeType":"118","messageId":"119","endLine":37,"endColumn":124},{"ruleId":"116","severity":1,"message":"166","line":1,"column":27,"nodeType":"118","messageId":"119","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"167","line":2,"column":24,"nodeType":"118","messageId":"119","endLine":2,"endColumn":31},{"ruleId":"116","severity":1,"message":"168","line":28,"column":18,"nodeType":"118","messageId":"119","endLine":28,"endColumn":27},{"ruleId":"116","severity":1,"message":"169","line":29,"column":10,"nodeType":"118","messageId":"119","endLine":29,"endColumn":16},{"ruleId":"116","severity":1,"message":"170","line":29,"column":18,"nodeType":"118","messageId":"119","endLine":29,"endColumn":24},{"ruleId":"171","severity":1,"message":"172","line":112,"column":15,"nodeType":"173","endLine":112,"endColumn":59},{"ruleId":"120","replacedBy":"174"},{"ruleId":"122","replacedBy":"175"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["176"],"no-negated-in-lhs",["177"],"'rowIndex' is assigned a value but never used.","'style' is assigned a value but never used.","no-undef","'block' is not defined.","undef","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleBlockClick' and 'isEdit'. Either include them or remove the dependency array.","ArrayExpression",["178"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'activeBlock.isListBlock', 'drag', 'drop', 'dropIn', 'dropOutBottom', 'dropOutTop', and 'preview'. Either include them or remove the dependency array.",["179"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'queryImgUrl' is defined but never used.","'param' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getChildren'. Either include it or remove the dependency array.",["180"],"'onDoubleClick' is not defined.","React Hook useEffect has missing dependencies: 'getChildNodes' and 'renderDatas'. Either include them or remove the dependency array.",["181"],"'dragCellId' is assigned a value but never used.","'dragRowId' is assigned a value but never used.","'dragRowIndex' is assigned a value but never used.","'useEffect' is defined but never used.","'message' is defined but never used.","'setImgUrl' is assigned a value but never used.","'imgKey' is assigned a value but never used.","'setKey' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["176"],["177"],"no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [componentsData, handleBlockClick, isEdit, isReset]",{"range":"190","text":"191"},"Update the dependencies array to be: [block, activeBlockKey, drop, preview, dropIn, dropOutTop, dropOutBottom, activeBlock.isListBlock, drag]",{"range":"192","text":"193"},"Update the dependencies array to be: [data, blockActive, cellWidth, getChildren]",{"range":"194","text":"195"},"Update the dependencies array to be: [data, getChildNodes, renderDatas]",{"range":"196","text":"197"},[23050,23075],"[componentsData, handleBlockClick, isEdit, isReset]",[4043,4066],"[block, activeBlockKey, drop, preview, dropIn, dropOutTop, dropOutBottom, activeBlock.isListBlock, drag]",[6158,6188],"[data, blockActive, cellWidth, getChildren]",[1662,1668],"[data, getChildNodes, renderDatas]"]